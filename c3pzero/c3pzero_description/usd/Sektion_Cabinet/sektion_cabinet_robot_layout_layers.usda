#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (50000.36282900722, -1.1102310810475126e-11, 0)
                double radius = 500
            }
            dictionary Perspective = {
                double3 position = (1.529410504840251, -0.8269382784067942, 1.4653872977671842)
                double3 target = (-1.6869110805073289, 1.7856339196496913, -0.385309160122258)
            }
            dictionary Right = {
                double3 position = (0, -50000.38188499212, -1.1102315041753768e-11)
                double radius = 500
            }
            dictionary Top = {
                double3 position = (0, 0, 50000.40200001001)
                double radius = 500
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary navmeshSettings = {
            double agentHeight = 180
            double agentRadius = 20
            bool excludeRigidBodies = 1
            uint64 ver = 1
            double voxelCeiling = 460
        }
        dictionary omni_layer = {
            string authoring_layer = "/home/mimic/ros/c3pzero_ws/src/c3pzero/c3pzero/c3pzero_description/usd/Sektion_Cabinet/drawer_manipulation.usd"
            dictionary locked = {
            }
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:index:regionOfInterestMax" = (0, 0, 0)
            float3 "rtx:index:regionOfInterestMin" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_ground_position" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_ground_reflectivity" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_rotation_axis" = (3.4028235e38, 3.4028235e38, 3.4028235e38)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
    }
    defaultPrim = "cabinet"
    endTimeCode = 0
    metersPerUnit = 1
    startTimeCode = -1
    subLayers = [
        @./drawer_manipulation.usd@ # This Layer should be c3pzero_2f_85_manipulation.usd (really its "taught/known" properties)
    ]
    timeCodesPerSecond = 60
    upAxis = "Z"
)

def PhysicsScene "physicsScene" (
    prepend apiSchemas = ["PhysxSceneAPI"]
)
{
    vector3f physics:gravityDirection = (0, 0, -1)
    float physics:gravityMagnitude = 9.81
    uniform token physxScene:broadphaseType = "MBP"
    bool physxScene:enableCCD = 1
    bool physxScene:enableGPUDynamics = 0
    bool physxScene:enableStabilization = 1
    uniform token physxScene:solverType = "TGS"

    def Xform "GroundPlane"
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Mesh "CollisionMesh"
        {
            uniform bool doubleSided = 0
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 2, 3]
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)]
            point3f[] points = [(-25, -25, 0), (25, -25, 0), (25, 25, 0), (-25, 25, 0)]
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
                interpolation = "varying"
            )
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Plane "CollisionPlane" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            uniform token purpose = "guide"
        }
    }
}

def Xform "cabinet" (
    prepend apiSchemas = ["PhysicsArticulationRootAPI", "PhysxArticulationAPI"]
)
{
    bool physxArticulation:enabledSelfCollisions = 0
    quatf xformOp:orient = (1, 0, 0, 0)
    float3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0.5)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def Xform "door_left_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (-3.1184042e-13, -3.943781e-15, -0.000016678094)
        float physics:density = 1000
        vector3f physics:velocity = (5.3652112e-8, 7.553395e-11, -1.0031844e-15)
        quatf xformOp:orient = (1, -1.7544975e-10, -5.1022173e-8, -3.081267e-8)
        double3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0.31620044, -0.37570012, -0.12973009)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "visuals" (
            instanceable = true
            references = @./sektion_cabinet_visuals.usd@</door_left_visuals>
        )
        {
        }

        def "collisions" (
            instanceable = true
            references = @./sektion_cabinet_collisions.usd@</door_left_collisions>
        )
        {
        }

        def Xform "door_left_nob_link" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
        )
        {
            vector3f physics:angularVelocity = (-3.1184042e-13, -3.943781e-15, -0.000016678094)
            float physics:density = 1000
            bool physics:rigidBodyEnabled = 1
            vector3f physics:velocity = (1.02172976e-7, -7.309394e-9, -1.9086621e-15)
            quatf xformOp:orient = (1, 4.5915535e-10, -1.02098795e-7, -4.2285677e-8)
            double3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def "visuals" (
                instanceable = true
                references = @./sektion_cabinet_visuals.usd@</door_left_knob_visuals>
            )
            {
            }

            def "collisions" (
                instanceable = true
                references = @./sektion_cabinet_collisions.usd@</door_left_knob_collisions>
            )
            {
            }
        }

        def PhysicsRevoluteJoint "door_left_joint" (
            prepend apiSchemas = ["PhysxJointAPI"]
        )
        {
            uniform token physics:axis = "X"
            rel physics:body0 = </cabinet/structure>
            rel physics:body1 = </cabinet/door_left_link>
            point3f physics:localPos0 = (0.3162, -0.3757, -0.12973)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.70710677, 0, -0.70710677, 0)
            quatf physics:localRot1 = (0.70710677, 0, -0.70710677, 0)
            float physics:lowerLimit = -89.95438
            float physics:upperLimit = 0
            float physxJoint:jointFriction = 0.01
        }
    }

    def Xform "door_right_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (3.086382e-13, 7.3217655e-15, 0.000016632843)
        float physics:density = 1000
        vector3f physics:velocity = (5.3506547e-8, -7.532907e-11, -9.928322e-16)
        quatf xformOp:orient = (1, -1.6093664e-10, -4.9477514e-8, 2.9708904e-8)
        double3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0.31620044, 0.37570006, -0.12973009)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "visuals" (
            instanceable = true
            references = @./sektion_cabinet_visuals.usd@</door_right_visuals>
        )
        {
        }

        def "collisions" (
            instanceable = true
            references = @./sektion_cabinet_collisions.usd@</door_right_collisions>
        )
        {
        }

        def Xform "door_right_nob_link" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
        )
        {
            vector3f physics:angularVelocity = (3.086382e-13, 7.3217655e-15, 0.000016632843)
            float physics:density = 1000
            vector3f physics:velocity = (1.0211983e-7, 7.3002817e-9, -1.8981447e-15)
            quatf xformOp:orient = (1, 1.2634921e-9, -5.5045632e-8, 1.7293097e-8)
            double3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def "visuals" (
                instanceable = true
                references = @./sektion_cabinet_visuals.usd@</door_right_knob_visuals>
            )
            {
            }

            def "collisions" (
                instanceable = true
                references = @./sektion_cabinet_collisions.usd@</door_right_knob_collisions>
            )
            {
            }
        }

        def PhysicsRevoluteJoint "door_right_joint" (
            prepend apiSchemas = ["PhysxJointAPI"]
        )
        {
            uniform token physics:axis = "X"
            rel physics:body0 = </cabinet/structure>
            rel physics:body1 = </cabinet/door_right_link>
            point3f physics:localPos0 = (0.3162, 0.3757, -0.12973)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.70710677, 0, -0.70710677, 0)
            quatf physics:localRot1 = (0.70710677, 0, -0.70710677, 0)
            float physics:lowerLimit = 0
            float physics:upperLimit = 89.95438
            float physxJoint:jointFriction = 0.01
        }
    }

    def Xform "drawer_bottom" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        float physics:density = 1000
        vector3f physics:velocity = (2.0933755e-35, -7.581631e-28, 1.7831822e-26)
        quatf xformOp:orient = (1, -3.754943e-10, 1.4881468e-8, -6.6747224e-10)
        double3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0.051500387, 3.7289283e-11, 0.18794999)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "visuals" (
            instanceable = true
            references = @./sektion_cabinet_visuals.usd@</drawer_bottom_visuals>
        )
        {
        }

        def "collisions" (
            instanceable = true
            references = @./sektion_cabinet_collisions.usd@</drawer_bottom_collisions>
        )
        {
        }

        def Xform "drawer_handle_bottom" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
        )
        {
            vector3f physics:angularVelocity = (0, 0, 0)
            float physics:density = 1000
            vector3f physics:velocity = (2.0933755e-35, -7.581631e-28, 1.7831822e-26)
            quatf xformOp:orient = (1, -7.275956e-12, 1.4901158e-8, -7.275956e-12)
            double3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def "visuals" (
                instanceable = true
                references = @./sektion_cabinet_visuals.usd@</drawer_handle_bottom_visuals>
            )
            {
            }

            def "collisions" (
                instanceable = true
                references = @./sektion_cabinet_collisions.usd@</drawer_handle_bottom_collisions>
            )
            {
            }
        }

        def PhysicsPrismaticJoint "drawer_bottom_joint" (
            prepend apiSchemas = ["PhysxJointAPI"]
        )
        {
            uniform token physics:axis = "X"
            rel physics:body0 = </cabinet/structure>
            rel physics:body1 = </cabinet/drawer_bottom>
            point3f physics:localPos0 = (0.0515, 0, 0.18795)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = 0
            float physics:upperLimit = 0.4
            float physxJoint:jointFriction = 0.1
        }
    }

    def Xform "drawer_top" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        float physics:density = 1000
        vector3f physics:velocity = (2.1658105e-34, 2.4502601e-27, 8.6692344e-26)
        quatf xformOp:orient = (1, -2.2178549e-10, 1.4892324e-8, 4.627159e-10)
        double3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0.051500373, 4.5474735e-11, 0.31720006)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "visuals" (
            instanceable = true
            references = @./sektion_cabinet_visuals.usd@</drawer_top_visuals>
        )
        {
        }

        def "collisions" (
            instanceable = true
            references = @./sektion_cabinet_collisions.usd@</drawer_top_collisions>
        )
        {
        }

        def Xform "drawer_handle_top" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
        )
        {
            vector3f physics:angularVelocity = (0, 0, 0)
            float physics:density = 1000
            vector3f physics:velocity = (2.1658105e-34, 2.4502601e-27, 8.6692344e-26)
            quatf xformOp:orient = (1, -3.835706e-10, 1.4878071e-8, 7.35177e-10)
            double3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def "visuals" (
                instanceable = true
                references = @./sektion_cabinet_visuals.usd@</drawer_handle_top_visuals>
            )
            {
            }

            def "collisions" (
                instanceable = true
                references = @./sektion_cabinet_collisions.usd@</drawer_handle_top_collisions>
            )
            {
                over "collisions"
                {
                    rel material:binding:physics = </cabinet/drawer_top/drawer_handle_top/collisions/PhysicsMaterial> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }
            }
        }

        def PhysicsPrismaticJoint "drawer_top_joint" (
            prepend apiSchemas = ["PhysxJointAPI"]
        )
        {
            uniform token physics:axis = "X"
            rel physics:body0 = </cabinet/structure>
            rel physics:body1 = </cabinet/drawer_top>
            point3f physics:localPos0 = (0.0515, 0, 0.3172)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = 0
            float physics:upperLimit = 0.4
            float physxJoint:jointFriction = 0.1
        }
    }

    def Xform "structure" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        float physics:density = 1000
        vector3f physics:velocity = (0, 0, 0)
        quatf xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (3.799796e-7, 0, -6.3329935e-8)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "visuals" (
            instanceable = true
            references = @./sektion_cabinet_visuals.usd@</sektion_visuals>
        )
        {
        }

        def "collisions" (
            instanceable = true
            references = @./sektion_cabinet_collisions.usd@</sektion_collisions>
        )
        {
        }

        def PhysicsFixedJoint "rootJoint"
        {
            rel physics:body1 = </cabinet/structure>
        }
    }
}

over "Render" (
    hide_in_stage_window = true
)
{
}

